name: Deploy to remote server

on:
  push:
    branches:
      - '*'  # Trigger the workflow on push events 

env:
  PROJECT_ID: leapai-396111 # Change if needed
  REGION_NAME: me-central1 # Change if needed
  MAX_INSTANCES: 5 # Change if needed
  BACKEND_SERVICE_NAME: backend
  FRONTEND_SERVICE_NAME: frontend

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare Terraform Variables
        run: |
          TF_VARS=$(echo '${{ toJSON(vars) }}' | jq -c 'if . == null then {} else . end | with_entries(.)')
          echo "TF_VAR_dynamic_env_vars=${TF_VARS}" >> $GITHUB_ENV

      - name: Prepare Terraform Secrets
        run: |
          TF_SECRETS=$(echo '${{ toJSON(secrets) }}' | jq -c 'if . == null then {} else . end | with_entries(.)')
          echo "TF_VAR_dynamic_env_secrets=${TF_SECRETS}" >> $GITHUB_ENV

      - name: Setup GCP Authentication
        uses: ./.github/actions/setup-gcp-authentication
        with:
          project-id: ${{ env.PROJECT_ID }}
          region-name: ${{ env.REGION_NAME }}
          gcp-sa-key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_FILE }}

      - name: Build and tag Backend Docker image
        run: |
          # Build backend Docker image
          docker build -t ${{ env.BACKEND_SERVICE_NAME }} -f ./Dockerfile .
          docker tag ${{ env.BACKEND_SERVICE_NAME }} ${{ env.REGION_NAME }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE_NAME }}/${{ env.BACKEND_SERVICE_NAME }}

      - name: Build and tag Frontend Docker image
        run: |
          # Build frontend Docker image
          docker build -t ${{ env.FRONTEND_SERVICE_NAME }} -f ./decision-tree-editor/Dockerfile ./decision-tree-editor
          docker tag ${{ env.FRONTEND_SERVICE_NAME }} ${{ env.REGION_NAME }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE_NAME }}/${{ env.FRONTEND_SERVICE_NAME }}

      - name: Terraform Validate
        id: validate
        run: |
          terraform -chdir=terraform/ validate -no-color

      - name: Terraform apply
        env:
          TF_VAR_backend_docker_image_name: ${{ env.BACKEND_SERVICE_NAME }}
          TF_VAR_frontend_docker_image_name: ${{ env.FRONTEND_SERVICE_NAME }}
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region_name: ${{ env.REGION_NAME }}
          TF_VAR_max_instances: ${{ env.MAX_INSTANCES }}
        run: terraform -chdir=terraform/ apply -target=google_artifact_registry_repository.backend_repo -target=google_artifact_registry_repository.frontend_repo -auto-approve

      - name: Push Backend Docker image 
        run: |
          docker push ${{ env.REGION_NAME }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE_NAME }}/${{ env.BACKEND_SERVICE_NAME }}

      - name: Push Frontend Docker image 
        run: |
          docker push ${{ env.REGION_NAME }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE_NAME }}/${{ env.FRONTEND_SERVICE_NAME }}

      - name: Terraform apply after docker push
        env:
          TF_VAR_backend_docker_image_name: ${{ env.BACKEND_SERVICE_NAME }}
          TF_VAR_frontend_docker_image_name: ${{ env.FRONTEND_SERVICE_NAME }}
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region_name: ${{ env.REGION_NAME }}
          TF_VAR_max_instances: ${{ env.MAX_INSTANCES }}          
          TF_VAR_dynamic_env_vars: ${{ env.TF_VAR_dynamic_env_vars }}
          TF_VAR_dynamic_env_secrets: ${{ env.TF_VAR_dynamic_env_secrets }}
        run: terraform -chdir=terraform/ apply -auto-approve

      - name: Deploy Backend Docker image
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }} \
            --image ${{ env.REGION_NAME }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE_NAME }}/${{ env.BACKEND_SERVICE_NAME }} \
            --platform managed \
            --region ${{ env.REGION_NAME }} \
            --allow-unauthenticated \
            --max-instances ${{ env.MAX_INSTANCES }} \
            --port 8080

      - name: Deploy Frontend Docker image
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE_NAME }} \
            --image ${{ env.REGION_NAME }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE_NAME }}/${{ env.FRONTEND_SERVICE_NAME }} \
            --platform managed \
            --region ${{ env.REGION_NAME }} \
            --allow-unauthenticated \
            --max-instances ${{ env.MAX_INSTANCES }} \
            --port 80
